=begin
#Conekta API

#Conekta sdk

The version of the OpenAPI document: 2.1.0
Contact: engineering@conekta.com
Generated by: https://openapi-generator.tech
Generator version: 7.5.0

=end

require 'date'
require 'time'

module Conekta
  class PaymentMethodBankTransfer
    attr_accessor :type

    attr_accessor :object

    attr_accessor :bank

    attr_accessor :clabe

    attr_accessor :description

    attr_accessor :executed_at

    attr_accessor :expires_at

    attr_accessor :issuing_account_bank

    attr_accessor :issuing_account_number

    attr_accessor :issuing_account_holder_name

    attr_accessor :issuing_account_tax_id

    attr_accessor :payment_attempts

    attr_accessor :receiving_account_holder_name

    attr_accessor :receiving_account_number

    attr_accessor :receiving_account_bank

    attr_accessor :receiving_account_tax_id

    attr_accessor :reference_number

    attr_accessor :tracking_code

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'type' => :'type',
        :'object' => :'object',
        :'bank' => :'bank',
        :'clabe' => :'clabe',
        :'description' => :'description',
        :'executed_at' => :'executed_at',
        :'expires_at' => :'expires_at',
        :'issuing_account_bank' => :'issuing_account_bank',
        :'issuing_account_number' => :'issuing_account_number',
        :'issuing_account_holder_name' => :'issuing_account_holder_name',
        :'issuing_account_tax_id' => :'issuing_account_tax_id',
        :'payment_attempts' => :'payment_attempts',
        :'receiving_account_holder_name' => :'receiving_account_holder_name',
        :'receiving_account_number' => :'receiving_account_number',
        :'receiving_account_bank' => :'receiving_account_bank',
        :'receiving_account_tax_id' => :'receiving_account_tax_id',
        :'reference_number' => :'reference_number',
        :'tracking_code' => :'tracking_code'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'type' => :'String',
        :'object' => :'String',
        :'bank' => :'String',
        :'clabe' => :'String',
        :'description' => :'String',
        :'executed_at' => :'Integer',
        :'expires_at' => :'Integer',
        :'issuing_account_bank' => :'String',
        :'issuing_account_number' => :'String',
        :'issuing_account_holder_name' => :'String',
        :'issuing_account_tax_id' => :'String',
        :'payment_attempts' => :'Array<Object>',
        :'receiving_account_holder_name' => :'String',
        :'receiving_account_number' => :'String',
        :'receiving_account_bank' => :'String',
        :'receiving_account_tax_id' => :'String',
        :'reference_number' => :'String',
        :'tracking_code' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'description',
        :'executed_at',
        :'issuing_account_bank',
        :'issuing_account_number',
        :'issuing_account_holder_name',
        :'issuing_account_tax_id',
        :'receiving_account_holder_name',
        :'receiving_account_tax_id',
        :'reference_number',
        :'tracking_code'
      ])
    end

    # List of class defined in allOf (OpenAPI v3)
    def self.openapi_all_of
      [
      :'PaymentMethod'
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Conekta::PaymentMethodBankTransfer` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Conekta::PaymentMethodBankTransfer`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'object')
        self.object = attributes[:'object']
      else
        self.object = nil
      end

      if attributes.key?(:'bank')
        self.bank = attributes[:'bank']
      end

      if attributes.key?(:'clabe')
        self.clabe = attributes[:'clabe']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'executed_at')
        self.executed_at = attributes[:'executed_at']
      end

      if attributes.key?(:'expires_at')
        self.expires_at = attributes[:'expires_at']
      end

      if attributes.key?(:'issuing_account_bank')
        self.issuing_account_bank = attributes[:'issuing_account_bank']
      end

      if attributes.key?(:'issuing_account_number')
        self.issuing_account_number = attributes[:'issuing_account_number']
      end

      if attributes.key?(:'issuing_account_holder_name')
        self.issuing_account_holder_name = attributes[:'issuing_account_holder_name']
      end

      if attributes.key?(:'issuing_account_tax_id')
        self.issuing_account_tax_id = attributes[:'issuing_account_tax_id']
      end

      if attributes.key?(:'payment_attempts')
        if (value = attributes[:'payment_attempts']).is_a?(Array)
          self.payment_attempts = value
        end
      end

      if attributes.key?(:'receiving_account_holder_name')
        self.receiving_account_holder_name = attributes[:'receiving_account_holder_name']
      end

      if attributes.key?(:'receiving_account_number')
        self.receiving_account_number = attributes[:'receiving_account_number']
      end

      if attributes.key?(:'receiving_account_bank')
        self.receiving_account_bank = attributes[:'receiving_account_bank']
      end

      if attributes.key?(:'receiving_account_tax_id')
        self.receiving_account_tax_id = attributes[:'receiving_account_tax_id']
      end

      if attributes.key?(:'reference_number')
        self.reference_number = attributes[:'reference_number']
      end

      if attributes.key?(:'tracking_code')
        self.tracking_code = attributes[:'tracking_code']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @object.nil?
        invalid_properties.push('invalid value for "object", object cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @object.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          type == o.type &&
          object == o.object &&
          bank == o.bank &&
          clabe == o.clabe &&
          description == o.description &&
          executed_at == o.executed_at &&
          expires_at == o.expires_at &&
          issuing_account_bank == o.issuing_account_bank &&
          issuing_account_number == o.issuing_account_number &&
          issuing_account_holder_name == o.issuing_account_holder_name &&
          issuing_account_tax_id == o.issuing_account_tax_id &&
          payment_attempts == o.payment_attempts &&
          receiving_account_holder_name == o.receiving_account_holder_name &&
          receiving_account_number == o.receiving_account_number &&
          receiving_account_bank == o.receiving_account_bank &&
          receiving_account_tax_id == o.receiving_account_tax_id &&
          reference_number == o.reference_number &&
          tracking_code == o.tracking_code
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [type, object, bank, clabe, description, executed_at, expires_at, issuing_account_bank, issuing_account_number, issuing_account_holder_name, issuing_account_tax_id, payment_attempts, receiving_account_holder_name, receiving_account_number, receiving_account_bank, receiving_account_tax_id, reference_number, tracking_code].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Conekta.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
