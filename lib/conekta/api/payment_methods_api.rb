=begin
#Conekta API

#Conekta sdk

The version of the OpenAPI document: 2.1.0
Contact: engineering@conekta.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.1.0

=end

require 'cgi'

module Conekta
  class PaymentMethodsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create Payment Method
    # Create a payment method for a customer.
    # @param id [String] Identifier of the resource
    # @param create_customer_payment_methods_request [CreateCustomerPaymentMethodsRequest] requested field for customer payment methods
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept_language Use for knowing which language to use (default to 'es')
    # @option opts [String] :x_child_company_id In the case of a holding company, the company id of the child company to which will process the request.
    # @return [CreateCustomerPaymentMethodsResponse]
    def create_customer_payment_methods(id, create_customer_payment_methods_request, opts = {})
      data, _status_code, _headers = create_customer_payment_methods_with_http_info(id, create_customer_payment_methods_request, opts)
      data
    end

    # Create Payment Method
    # Create a payment method for a customer.
    # @param id [String] Identifier of the resource
    # @param create_customer_payment_methods_request [CreateCustomerPaymentMethodsRequest] requested field for customer payment methods
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept_language Use for knowing which language to use (default to 'es')
    # @option opts [String] :x_child_company_id In the case of a holding company, the company id of the child company to which will process the request.
    # @return [Array<(CreateCustomerPaymentMethodsResponse, Integer, Hash)>] CreateCustomerPaymentMethodsResponse data, response status code and response headers
    def create_customer_payment_methods_with_http_info(id, create_customer_payment_methods_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PaymentMethodsApi.create_customer_payment_methods ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PaymentMethodsApi.create_customer_payment_methods"
      end
      # verify the required parameter 'create_customer_payment_methods_request' is set
      if @api_client.config.client_side_validation && create_customer_payment_methods_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_customer_payment_methods_request' when calling PaymentMethodsApi.create_customer_payment_methods"
      end
      allowable_values = ["es", "en"]
      if @api_client.config.client_side_validation && opts[:'accept_language'] && !allowable_values.include?(opts[:'accept_language'])
        fail ArgumentError, "invalid value for \"accept_language\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/customers/{id}/payment_sources'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.conekta-v2.1.0+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept-Language'] = opts[:'accept_language'] if !opts[:'accept_language'].nil?
      header_params[:'X-Child-Company-Id'] = opts[:'x_child_company_id'] if !opts[:'x_child_company_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_customer_payment_methods_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateCustomerPaymentMethodsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"PaymentMethodsApi.create_customer_payment_methods",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentMethodsApi#create_customer_payment_methods\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Payment Method
    # Delete an existing payment method
    # @param id [String] Identifier of the resource
    # @param payment_method_id [String] Identifier of the payment method
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept_language Use for knowing which language to use (default to 'es')
    # @option opts [String] :x_child_company_id In the case of a holding company, the company id of the child company to which will process the request.
    # @return [UpdateCustomerPaymentMethodsResponse]
    def delete_customer_payment_methods(id, payment_method_id, opts = {})
      data, _status_code, _headers = delete_customer_payment_methods_with_http_info(id, payment_method_id, opts)
      data
    end

    # Delete Payment Method
    # Delete an existing payment method
    # @param id [String] Identifier of the resource
    # @param payment_method_id [String] Identifier of the payment method
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept_language Use for knowing which language to use (default to 'es')
    # @option opts [String] :x_child_company_id In the case of a holding company, the company id of the child company to which will process the request.
    # @return [Array<(UpdateCustomerPaymentMethodsResponse, Integer, Hash)>] UpdateCustomerPaymentMethodsResponse data, response status code and response headers
    def delete_customer_payment_methods_with_http_info(id, payment_method_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PaymentMethodsApi.delete_customer_payment_methods ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PaymentMethodsApi.delete_customer_payment_methods"
      end
      # verify the required parameter 'payment_method_id' is set
      if @api_client.config.client_side_validation && payment_method_id.nil?
        fail ArgumentError, "Missing the required parameter 'payment_method_id' when calling PaymentMethodsApi.delete_customer_payment_methods"
      end
      allowable_values = ["es", "en"]
      if @api_client.config.client_side_validation && opts[:'accept_language'] && !allowable_values.include?(opts[:'accept_language'])
        fail ArgumentError, "invalid value for \"accept_language\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/customers/{id}/payment_sources/{payment_method_id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'payment_method_id' + '}', CGI.escape(payment_method_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.conekta-v2.1.0+json'])
      header_params[:'Accept-Language'] = opts[:'accept_language'] if !opts[:'accept_language'].nil?
      header_params[:'X-Child-Company-Id'] = opts[:'x_child_company_id'] if !opts[:'x_child_company_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateCustomerPaymentMethodsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"PaymentMethodsApi.delete_customer_payment_methods",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentMethodsApi#delete_customer_payment_methods\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Payment Methods
    # Get a list of Payment Methods
    # @param id [String] Identifier of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept_language Use for knowing which language to use (default to 'es')
    # @option opts [String] :x_child_company_id In the case of a holding company, the company id of the child company to which will process the request.
    # @option opts [Integer] :limit The numbers of items to return, the maximum value is 250 (default to 20)
    # @option opts [String] :_next next page
    # @option opts [String] :previous previous page
    # @option opts [String] :search General order search, e.g. by mail, reference etc.
    # @return [GetPaymentMethodResponse]
    def get_customer_payment_methods(id, opts = {})
      data, _status_code, _headers = get_customer_payment_methods_with_http_info(id, opts)
      data
    end

    # Get Payment Methods
    # Get a list of Payment Methods
    # @param id [String] Identifier of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept_language Use for knowing which language to use (default to 'es')
    # @option opts [String] :x_child_company_id In the case of a holding company, the company id of the child company to which will process the request.
    # @option opts [Integer] :limit The numbers of items to return, the maximum value is 250 (default to 20)
    # @option opts [String] :_next next page
    # @option opts [String] :previous previous page
    # @option opts [String] :search General order search, e.g. by mail, reference etc.
    # @return [Array<(GetPaymentMethodResponse, Integer, Hash)>] GetPaymentMethodResponse data, response status code and response headers
    def get_customer_payment_methods_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PaymentMethodsApi.get_customer_payment_methods ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PaymentMethodsApi.get_customer_payment_methods"
      end
      allowable_values = ["es", "en"]
      if @api_client.config.client_side_validation && opts[:'accept_language'] && !allowable_values.include?(opts[:'accept_language'])
        fail ArgumentError, "invalid value for \"accept_language\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 250
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling PaymentMethodsApi.get_customer_payment_methods, must be smaller than or equal to 250.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling PaymentMethodsApi.get_customer_payment_methods, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/customers/{id}/payment_sources'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'next'] = opts[:'_next'] if !opts[:'_next'].nil?
      query_params[:'previous'] = opts[:'previous'] if !opts[:'previous'].nil?
      query_params[:'search'] = opts[:'search'] if !opts[:'search'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.conekta-v2.1.0+json'])
      header_params[:'Accept-Language'] = opts[:'accept_language'] if !opts[:'accept_language'].nil?
      header_params[:'X-Child-Company-Id'] = opts[:'x_child_company_id'] if !opts[:'x_child_company_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetPaymentMethodResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"PaymentMethodsApi.get_customer_payment_methods",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentMethodsApi#get_customer_payment_methods\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Payment Method
    # Gets a payment Method that corresponds to a customer ID.
    # @param id [String] Identifier of the resource
    # @param payment_method_id [String] Identifier of the payment method
    # @param update_payment_methods [UpdatePaymentMethods] requested field for customer payment methods
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept_language Use for knowing which language to use (default to 'es')
    # @option opts [String] :x_child_company_id In the case of a holding company, the company id of the child company to which will process the request.
    # @return [UpdateCustomerPaymentMethodsResponse]
    def update_customer_payment_methods(id, payment_method_id, update_payment_methods, opts = {})
      data, _status_code, _headers = update_customer_payment_methods_with_http_info(id, payment_method_id, update_payment_methods, opts)
      data
    end

    # Update Payment Method
    # Gets a payment Method that corresponds to a customer ID.
    # @param id [String] Identifier of the resource
    # @param payment_method_id [String] Identifier of the payment method
    # @param update_payment_methods [UpdatePaymentMethods] requested field for customer payment methods
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept_language Use for knowing which language to use (default to 'es')
    # @option opts [String] :x_child_company_id In the case of a holding company, the company id of the child company to which will process the request.
    # @return [Array<(UpdateCustomerPaymentMethodsResponse, Integer, Hash)>] UpdateCustomerPaymentMethodsResponse data, response status code and response headers
    def update_customer_payment_methods_with_http_info(id, payment_method_id, update_payment_methods, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PaymentMethodsApi.update_customer_payment_methods ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PaymentMethodsApi.update_customer_payment_methods"
      end
      # verify the required parameter 'payment_method_id' is set
      if @api_client.config.client_side_validation && payment_method_id.nil?
        fail ArgumentError, "Missing the required parameter 'payment_method_id' when calling PaymentMethodsApi.update_customer_payment_methods"
      end
      # verify the required parameter 'update_payment_methods' is set
      if @api_client.config.client_side_validation && update_payment_methods.nil?
        fail ArgumentError, "Missing the required parameter 'update_payment_methods' when calling PaymentMethodsApi.update_customer_payment_methods"
      end
      allowable_values = ["es", "en"]
      if @api_client.config.client_side_validation && opts[:'accept_language'] && !allowable_values.include?(opts[:'accept_language'])
        fail ArgumentError, "invalid value for \"accept_language\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/customers/{id}/payment_sources/{payment_method_id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'payment_method_id' + '}', CGI.escape(payment_method_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.conekta-v2.1.0+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept-Language'] = opts[:'accept_language'] if !opts[:'accept_language'].nil?
      header_params[:'X-Child-Company-Id'] = opts[:'x_child_company_id'] if !opts[:'x_child_company_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_payment_methods)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateCustomerPaymentMethodsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"PaymentMethodsApi.update_customer_payment_methods",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentMethodsApi#update_customer_payment_methods\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
