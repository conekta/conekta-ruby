=begin
#Conekta API

#Conekta sdk

The version of the OpenAPI document: 2.1.0
Contact: engineering@conekta.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'spec_helper'
require_relative 'base_test'
require 'json'

# Unit tests for Conekta::ChargesApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'ChargesApi' do
  before do
    # run before each test
    Conekta.configure do |config|
      config.host = BaseTest.host
      config.access_token = 'key_xxxxxx'
      config.scheme = BaseTest.scheme
    end
    @api_instance = Conekta::ChargesApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ChargesApi' do
    it 'should create an instance of ChargesApi' do
      expect(@api_instance).to be_instance_of(Conekta::ChargesApi)
    end
  end

  # unit tests for get_charges
  # Get A List of Charges
  # @param [Hash] opts the optional parameters
  # @option opts [String] :accept_language Use for knowing which language to use
  # @option opts [String] :x_child_company_id In the case of a holding company, the company id of the child company to which will process the request.
  # @option opts [Integer] :limit The numbers of items to return, the maximum value is 250
  # @option opts [String] :search General order search, e.g. by mail, reference etc.
  # @option opts [String] :_next next page
  # @option opts [String] :previous previous page
  # @return [GetChargesResponse]
  describe 'get_charges test' do
    it 'should work' do
      response = @api_instance.get_charges({ limit: 20, accept_language: 'es' })

      expect(response).to be_instance_of(Conekta::GetChargesResponse)
      expect(response.has_more).to be_truthy
      expect(response.data.length).to eq(20)
      expect(response.data.first.channel.id).to eq('channel_2tqJMS7on7HBVqWKo')
      expect(response.data.first.payment_method).to be_instance_of(Conekta::PaymentMethodCash)
      expect(response.data.first.payment_method.reference).to eq('93003547316416')
      expect(response.data.first.refunds).to be_nil
      expect(response.data.first.reference_id).to be_falsey
    end
  end

  # unit tests for orders_create_charge
  # Create charge
  # Create charge for an existing orden
  # @param id Identifier of the resource
  # @param charge_request requested field for a charge
  # @param [Hash] opts the optional parameters
  # @option opts [String] :accept_language Use for knowing which language to use
  # @option opts [String] :x_child_company_id In the case of a holding company, the company id of the child company to which will process the request.
  # @return [ChargeOrderResponse]
  describe 'orders_create_charge test' do
    it 'card' do
      id = 'ord_2tVKxbhNzfUnGjnXG'

      payment_method_data = {
        type: 'card',
        token_id: 'ttest5214'
      }

      payment_method = Conekta::ChargeRequestPaymentMethod.build(payment_method_data)
      charge_request = Conekta::ChargeRequest.new({
                                                    amount: 40000,
                                                    payment_method: payment_method
                                                  })
      response = @api_instance.orders_create_charge(id, charge_request)

      expect(response).to be_instance_of(Conekta::ChargeOrderResponse)
      expect(response.amount).to eq(charge_request.amount)
      expect(response.object).to eq('charge')
      expect(response.status).to eq('pre_authorized')
      expect(response.payment_method).to be_instance_of(Conekta::PaymentMethodCard)
      expect(response.payment_method.object).to eq('card_payment')
      expect(response.payment_method.type).to eq('credit')
    end

    it 'cash' do
      id = "ord_2tVL8dT1Hm3y3YiaN"
      payment_method_data = {
        type: 'cash',
      }
      payment_method = Conekta::ChargeRequestPaymentMethod.build(payment_method_data)
      charge_request = Conekta::ChargeRequest.new({
                                                    amount: 40000,
                                                    payment_method: payment_method
                                                  })
      response = @api_instance.orders_create_charge(id,charge_request)

      expect(response).to be_instance_of(Conekta::ChargeOrderResponse)
      expect(response.amount).to eq(charge_request.amount)
      expect(response.object).to eq('charge')
      expect(response.status).to eq('pending_payment')
      expect(response.payment_method).to be_instance_of(Conekta::PaymentMethodCash)
      expect(response.payment_method.object).to eq('cash_payment')
      expect(response.payment_method.type).to eq('oxxo')
      expect(response.payment_method.barcode_url).to be_truthy
      expect(response.payment_method.cashier_id).to be_falsey
      expect(response.payment_method.auth_code).to be_falsey
      expect(response.payment_method.store).to be_falsey
    end
    it 'spei' do
      id = "ord_2tVLUFrQBB4HKz1zj"
      payment_method_data = {
        type: 'spei',
      }
      payment_method = Conekta::ChargeRequestPaymentMethod.build(payment_method_data)
      charge_request = Conekta::ChargeRequest.new({
                                                    amount: 40000,
                                                    payment_method: payment_method
                                                  })
      response = @api_instance.orders_create_charge(id,charge_request)

      expect(response).to be_instance_of(Conekta::ChargeOrderResponse)
      expect(response.amount).to eq(charge_request.amount)
      expect(response.object).to eq('charge')
      expect(response.status).to eq('pending_payment')
      expect(response.payment_method).to be_instance_of(Conekta::PaymentMethodBankTransfer)
      expect(response.payment_method.object).to eq('bank_transfer_payment')
      expect(response.payment_method.type).to eq('spei')
      expect(response.payment_method.clabe).to eq('646180111805035472')
      expect(response.payment_method.bank).to eq('STP')
    end
  end

end
