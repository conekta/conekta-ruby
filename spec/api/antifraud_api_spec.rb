=begin
#Conekta API

#Conekta sdk

The version of the OpenAPI document: 2.1.0
Contact: engineering@conekta.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'spec_helper'
require_relative 'base_test'
require 'json'

# Unit tests for Conekta::AntifraudApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'AntifraudApi' do
  before do
    # run before each test
    Conekta.configure do |config|
      config.host = BaseTest.host
      config.access_token = 'key_xxxxxx'
      config.scheme = BaseTest.scheme
    end
    @api_instance = Conekta::AntifraudApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of AntifraudApi' do
    it 'should create an instance of AntifraudApi' do
      expect(@api_instance).to be_instance_of(Conekta::AntifraudApi)
    end
  end

  # unit tests for create_rule_blacklist
  # Create blacklisted rule
  # @param create_risk_rules_data requested field for blacklist rule
  # @param [Hash] opts the optional parameters
  # @option opts [String] :accept_language Use for knowing which language to use
  # @return [BlacklistRuleResponse]
  describe 'create_rule_blacklist test' do
    it 'should work' do

      create_risk_rules_data = Conekta::CreateRiskRulesData.new(
        {
          description: 'test description',
          field: 'email',
          value: 'fcarrero_black@gmail.com'
        }
      )

      response = @api_instance.create_rule_blacklist(create_risk_rules_data)

      expect(response).not_to be_nil
      expect(response).to be_instance_of(Conekta::BlacklistRuleResponse)
      expect(response.value).to eq(create_risk_rules_data.value)
    end
  end

  # unit tests for create_rule_whitelist
  # Create whitelisted rule
  # @param [Hash] opts the optional parameters
  # @option opts [String] :accept_language Use for knowing which language to use
  # @option opts [CreateRiskRulesData] :create_risk_rules_data 
  # @return [WhitelistlistRuleResponse]
  describe 'create_rule_whitelist test' do
    it 'should work' do
      create_risk_rules_data = Conekta::CreateRiskRulesData.new(
        {
          description: 'test description',
          field: 'email',
          value: 'fcarrero@gmail.com'
        }
      )

      response = @api_instance.create_rule_whitelist({accept_language: 'es', create_risk_rules_data: create_risk_rules_data})

      expect(response).not_to be_nil
      expect(response).to be_instance_of(Conekta::WhitelistlistRuleResponse)
      expect(response.value).to eq(create_risk_rules_data.value)
      expect(response.id).to eq('618c3f30db8b8da9be376b17')
      expect(response.field).to eq(create_risk_rules_data.field)
      expect(response.description).to eq(create_risk_rules_data.description)

    end
  end

  # unit tests for delete_rule_blacklist
  # Delete blacklisted rule
  # @param id Identifier of the resource
  # @param [Hash] opts the optional parameters
  # @option opts [String] :accept_language Use for knowing which language to use
  # @option opts [String] :x_child_company_id In the case of a holding company, the company id of the child company to which will process the request.
  # @return [DeletedBlacklistRuleResponse]
  describe 'delete_rule_blacklist test' do
    it 'should work' do
      id = '618c3f30db8b8da9be376b1e'

      response = @api_instance.delete_rule_blacklist(id)

      expect(response).to be_instance_of(Conekta::DeletedBlacklistRuleResponse)
      expect(response.id).to eq(id)
    end
  end

  # unit tests for delete_rule_whitelist
  # Delete whitelisted rule
  # @param id Identifier of the resource
  # @param [Hash] opts the optional parameters
  # @option opts [String] :accept_language Use for knowing which language to use
  # @option opts [String] :x_child_company_id In the case of a holding company, the company id of the child company to which will process the request.
  # @return [DeletedWhitelistRuleResponse]
  describe 'delete_rule_whitelist test' do
    it 'should work' do
      id = '618c3f2fdb8b8da9be376afe'

      response = @api_instance.delete_rule_whitelist(id)

      expect(response).to be_instance_of(Conekta::DeletedWhitelistRuleResponse)
      expect(response.id).to eq(id)
    end
  end

  # unit tests for get_rule_blacklist
  # Get list of blacklisted rules
  # Return all rules
  # @param [Hash] opts the optional parameters
  # @option opts [String] :accept_language Use for knowing which language to use
  # @return [RiskRulesList]
  describe 'get_rule_blacklist test' do
    it 'should work' do
      response = @api_instance.get_rule_blacklist

      expect(response).to be_instance_of(Conekta::RiskRulesList)
      expect(response.data.length).to eq(25)
      expect(response.has_more).to be_truthy
      expect(response.data).to be_instance_of(Array)
      expect(response.data.first.field).to eq('email')
    end
  end

  # unit tests for get_rule_whitelist
  # Get a list of whitelisted rules
  # Return all rules
  # @param [Hash] opts the optional parameters
  # @option opts [String] :accept_language Use for knowing which language to use
  # @return [RiskRulesList]
  describe 'get_rule_whitelist test' do
    it 'should work' do
      response = @api_instance.get_rule_whitelist

      expect(response).to be_instance_of(Conekta::RiskRulesList)
      expect(response.data.length).to eq(25)
      expect(response.has_more).to be_truthy
      expect(response.data).to be_instance_of(Array)
      expect(response.data.first.field).to eq('email')
    end
  end

end
