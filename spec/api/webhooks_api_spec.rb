=begin
#Conekta API

#Conekta sdk

The version of the OpenAPI document: 2.1.0
Contact: engineering@conekta.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'spec_helper'
require 'json'

# Unit tests for Conekta::WebhooksApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'WebhooksApi' do
  before do
    # run before each test
    @api_instance = Conekta::WebhooksApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of WebhooksApi' do
    it 'should create an instance of WebhooksApi' do
      expect(@api_instance).to be_instance_of(Conekta::WebhooksApi)
    end
  end

  # unit tests for create_webhook
  # Create Webhook
  # What we do at Conekta translates into events. For example, an event of interest to us occurs at the time a payment is successfully processed. At that moment we will be interested in doing several things: Send an email to the buyer, generate an invoice, start the process of shipping the product, etc.
  # @param webhook_request requested field for webhook
  # @param [Hash] opts the optional parameters
  # @option opts [String] :accept_language Use for knowing which language to use
  # @return [WebhookResponse]
  describe 'create_webhook test' do
    it 'should work' do
      webhook_request = Conekta::WebhookRequest.new({ url: 'https://webhook.site/0b8c9fa8-92c3-4a04-beea-a7ec037f6466', synchronous: false })

      response = @api_instance.create_webhook(webhook_request)

      expect(response).to be_instance_of(Conekta::WebhookResponse)
      expect(response.status).to eq('listening')
      expect(response.url).to eq('https://webhook.site/0b8c9fa8-92c3-4a04-beea-a7ec037f6466')
      expect(response.synchronous).to eq(webhook_request.synchronous)
    end
  end

  # unit tests for delete_webhook
  # Delete Webhook
  # @param id Identifier of the resource
  # @param [Hash] opts the optional parameters
  # @option opts [String] :accept_language Use for knowing which language to use
  # @return [WebhookResponse]
  describe 'delete_webhook test' do
    it 'should work' do
      id = '641b1d5662d7e00001eaa46b'

      response = @api_instance.delete_webhook(id, {accept_language: 'es'})

      expect(response).to be_instance_of(Conekta::WebhookResponse)
      expect(response.id).to eq(id)
      expect(response.deleted).to eq(true)
    end
  end

  # unit tests for get_webhook
  # Get Webhook
  # @param id Identifier of the resource
  # @param [Hash] opts the optional parameters
  # @option opts [String] :accept_language Use for knowing which language to use
  # @option opts [String] :x_child_company_id In the case of a holding company, the company id of the child company to which will process the request.
  # @return [WebhookResponse]
  describe 'get_webhook test' do
    it 'should work' do

      id = '641b1d5662d7e00001eaa46b'

      response = @api_instance.get_webhook(id, {accept_language: 'es'})

      expect(response).to be_instance_of(Conekta::WebhookResponse)
      expect(response.id).to eq(id)
    end
  end

  # unit tests for get_webhooks
  # Get List of Webhooks
  # Consume the list of webhooks you have, each environment supports 10 webhooks (For production and testing)
  # @param [Hash] opts the optional parameters
  # @option opts [String] :accept_language Use for knowing which language to use
  # @option opts [String] :x_child_company_id In the case of a holding company, the company id of the child company to which will process the request.
  # @option opts [Integer] :limit The numbers of items to return, the maximum value is 250
  # @option opts [String] :search General order search, e.g. by mail, reference etc.
  # @option opts [String] :_next next page
  # @option opts [String] :previous previous page
  # @return [GetWebhooksResponse]
  describe 'get_webhooks test' do
    it 'should work' do
      response = @api_instance.get_webhooks({accept_language: 'es', limit: 20})

      expect(response).to be_instance_of(Conekta::GetWebhooksResponse)
      expect(response.data).to be_instance_of(Array)
      expect(response.data.length).to be > 0
      expect(response.data[0]).to be_instance_of(Conekta::WebhookResponse)
    end
  end

  # unit tests for test_webhook
  # Test Webhook
  # Send a webhook.ping event
  # @param id Identifier of the resource
  # @param [Hash] opts the optional parameters
  # @option opts [String] :accept_language Use for knowing which language to use
  # @return [WebhookResponse]
  describe 'test_webhook test' do
    it 'should work' do
      response = @api_instance.test_webhook('641b1d5662d7e00001eaa46b', {accept_language: 'es'})

      expect(response).to be_instance_of(Conekta::WebhookResponse)
      expect(response.id).to eq('641b1d5662d7e00001eaa46b')
    end
  end

  # unit tests for update_webhook
  # Update Webhook
  # updates an existing webhook
  # @param id Identifier of the resource
  # @param webhook_update_request requested fields in order to update a webhook
  # @param [Hash] opts the optional parameters
  # @option opts [String] :accept_language Use for knowing which language to use
  # @option opts [String] :x_child_company_id In the case of a holding company, the company id of the child company to which will process the request.
  # @return [WebhookResponse]
  describe 'update_webhook test' do
    it 'should work' do
      id = '641b1d5662d7e00001eaa46b'

      response = @api_instance.update_webhook(id, Conekta::WebhookUpdateRequest.new({ url: 'https://updated.webhook.site/0b8c9fa8-92c3-4a04-beea-a7ec037f6466', synchronous: false }))

      expect(response).to be_instance_of(Conekta::WebhookResponse)
      expect(response.id).to eq(id)
      expect(response.url).to eq('https://updated.webhook.site/0b8c9fa8-92c3-4a04-beea-a7ec037f6466')
      expect(response.synchronous).to eq(false)
    end
  end

end
