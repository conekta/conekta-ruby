=begin
#Conekta API

#Conekta sdk

The version of the OpenAPI document: 2.1.0
Contact: engineering@conekta.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'spec_helper'
require 'json'

# Unit tests for Conekta::WebhookKeysApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'WebhookKeysApi' do
  before do
    # run before each test
    @api_instance = Conekta::WebhookKeysApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of WebhookKeysApi' do
    it 'should create an instance of WebhookKeysApi' do
      expect(@api_instance).to be_instance_of(Conekta::WebhookKeysApi)
    end
  end

  # unit tests for create_webhook_key
  # Create Webhook Key
  # Create a webhook key
  # @param [Hash] opts the optional parameters
  # @option opts [String] :accept_language Use for knowing which language to use
  # @option opts [WebhookKeyRequest] :webhook_key_request 
  # @return [WebhookKeyCreateResponse]
  describe 'create_webhook_key test' do
    it 'should work' do
      response = @api_instance.create_webhook_key({ webhook_key_request: Conekta::WebhookKeyRequest.new({ active: true }) })

      expect(response).to be_instance_of(Conekta::WebhookKeyCreateResponse)
      expect(response.id).to eq('645a59da22e7da0001cad283')
      expect(response.livemode).to eq(true)
    end
  end

  # unit tests for delete_webhook_key
  # Delete Webhook key
  # @param id Identifier of the resource
  # @param [Hash] opts the optional parameters
  # @option opts [String] :accept_language Use for knowing which language to use
  # @return [WebhookKeyDeleteResponse]
  describe 'delete_webhook_key test' do
    it 'should work' do
      id = '645a59da22e7da0001cad283'

      response = @api_instance.delete_webhook_key(id)

      expect(response).to be_instance_of(Conekta::WebhookKeyDeleteResponse)
      expect(response.id).to eq('645a59da22e7da0001cad283')
      expect(response.deleted).to eq(true)
      expect(response.active).to eq(false)
    end
  end

  # unit tests for get_webhook_key
  # Get Webhook Key
  # @param id Identifier of the resource
  # @param [Hash] opts the optional parameters
  # @option opts [String] :accept_language Use for knowing which language to use
  # @option opts [String] :x_child_company_id In the case of a holding company, the company id of the child company to which will process the request.
  # @return [WebhookKeyResponse]
  describe 'get_webhook_key test' do
    it 'should work' do
      id = '645a5eb022e7da0001cad2a4'

      response = @api_instance.get_webhook_key(id)

      expect(response).to be_instance_of(Conekta::WebhookKeyResponse)
      expect(response.id).to eq('645a5eb022e7da0001cad2a4')
      expect(response.active).to eq(true)
      expect(response.deactivated_at).to be_nil
    end
    it 'get deleted webhook key' do
      id = '635594352a1979000185a36a'

      response = @api_instance.get_webhook_key(id)

      expect(response).to be_instance_of(Conekta::WebhookKeyResponse)
      expect(response.id).to eq('635594352a1979000185a36a')
      expect(response.active).to eq(false)
      expect(response.deactivated_at).not_to be_nil
    end
  end

  # unit tests for get_webhook_keys
  # Get List of Webhook Keys
  # Consume the list of webhook keys you have
  # @param [Hash] opts the optional parameters
  # @option opts [String] :accept_language Use for knowing which language to use
  # @option opts [String] :x_child_company_id In the case of a holding company, the company id of the child company to which will process the request.
  # @option opts [Integer] :limit The numbers of items to return, the maximum value is 250
  # @option opts [String] :search General order search, e.g. by mail, reference etc.
  # @option opts [String] :_next next page
  # @option opts [String] :previous previous page
  # @return [GetWebhookKeysResponse]
  describe 'get_webhook_keys test' do
    it 'should work' do
      response = @api_instance.get_webhook_keys({limit: 2})

      expect(response).to be_instance_of(Conekta::GetWebhookKeysResponse)
      expect(response.data).to be_instance_of(Array)
      expect(response.data.size).to eq(2)
      expect(response.data[0].id).to eq('645a5eb022e7da0001cad2a4')
      expect(response.data[0].active).to eq(true)
      expect(response.data[0].deactivated_at).to be_nil
    end
  end

  # unit tests for update_webhook_key
  # Update Webhook Key
  # updates an existing webhook key
  # @param id Identifier of the resource
  # @param [Hash] opts the optional parameters
  # @option opts [String] :accept_language Use for knowing which language to use
  # @option opts [WebhookKeyUpdateRequest] :webhook_key_update_request 
  # @return [WebhookKeyResponse]
  describe 'update_webhook_key test' do
    it 'should work' do
      id = '645a613622e7da0001cad882'

      response = @api_instance.update_webhook_key(id, { webhook_key_update_request: Conekta::WebhookKeyUpdateRequest.new({ active: false }) })

      expect(response).to be_instance_of(Conekta::WebhookKeyResponse)
      expect(response.id).to eq('645a613622e7da0001cad882')
      expect(response.active).to eq(false)
      expect(response.deactivated_at).not_to be_nil
    end
  end

end
