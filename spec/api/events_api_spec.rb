=begin
#Conekta API

#Conekta sdk

The version of the OpenAPI document: 2.1.0
Contact: engineering@conekta.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'spec_helper'
require 'json'

# Unit tests for Conekta::EventsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'EventsApi' do
  before do
    # run before each test
    @api_instance = Conekta::EventsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of EventsApi' do
    it 'should create an instance of EventsApi' do
      expect(@api_instance).to be_instance_of(Conekta::EventsApi)
    end
  end

  # unit tests for get_event
  # Get Event
  # Returns a single event
  # @param id Identifier of the resource
  # @param [Hash] opts the optional parameters
  # @option opts [String] :accept_language Use for knowing which language to use
  # @option opts [String] :x_child_company_id In the case of a holding company, the company id of the child company to which will process the request.
  # @return [EventResponse]
  describe 'get_event test' do
    it 'should work' do
      id= '63fe3d2ddf70970001cfb41a'
      response = @api_instance.get_event(id, {accept_language: 'en'})

      expect(response).to be_instance_of(Conekta::EventResponse)
      expect(response.id).to eq(id)
      expect(response.webhook_logs.length).to eq(1)
    end
  end

  # unit tests for get_events
  # Get list of Events
  # @param [Hash] opts the optional parameters
  # @option opts [String] :accept_language Use for knowing which language to use
  # @option opts [String] :x_child_company_id In the case of a holding company, the company id of the child company to which will process the request.
  # @option opts [Integer] :limit The numbers of items to return, the maximum value is 250
  # @option opts [String] :search General order search, e.g. by mail, reference etc.
  # @option opts [String] :_next next page
  # @option opts [String] :previous previous page
  # @return [GetEventsResponse]
  describe 'get_events test' do
    it 'should work' do
      response = @api_instance.get_events({accept_language: 'es'})

      expect(response).to be_instance_of(Conekta::GetEventsResponse)
      expect(response.has_more).to be_truthy
      expect(response.previous_page_url).to be_nil
      expect(response.next_page_url).not_to be_nil
    end
  end

  # unit tests for resend_event
  # Resend Event
  # Try to send an event
  # @param event_id event identifier
  # @param webhook_log_id webhook log identifier
  # @param [Hash] opts the optional parameters
  # @option opts [String] :accept_language Use for knowing which language to use
  # @return [EventsResendResponse]
  describe 'resend_event test' do
    it 'should work' do
      event_id= '6463d6e35a4c3e001819e760'
      webhook_log_id= 'webhl_2svd2sh6GbqzyWBNZ'

      response = @api_instance.resend_event(event_id, webhook_log_id)

      expect(response).to be_instance_of(Conekta::EventsResendResponse)
      expect(response.id).to eq(webhook_log_id)
      expect(response.last_http_response_status).to eq(405)
    end
  end

end
