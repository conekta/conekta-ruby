=begin
#Conekta API

#Conekta sdk

The version of the OpenAPI document: 2.1.0
Contact: engineering@conekta.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'spec_helper'
require 'json'

# Unit tests for Conekta::TransfersApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'TransfersApi' do
  before do
    # run before each test
    @api_instance = Conekta::TransfersApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of TransfersApi' do
    it 'should create an instance of TransfersApi' do
      expect(@api_instance).to be_instance_of(Conekta::TransfersApi)
    end
  end

  # unit tests for get_transfer
  # Get Transfer
  # Get the details of a Transfer
  # @param id Identifier of the resource
  # @param [Hash] opts the optional parameters
  # @option opts [String] :accept_language Use for knowing which language to use
  # @option opts [String] :x_child_company_id In the case of a holding company, the company id of the child company to which will process the request.
  # @return [TransferResponse]
  describe 'get_transfer test' do
    it 'should work' do
      id = '64462930651b2600017b6d43'

      response= @api_instance.get_transfer(id)

      expect(response).to be_instance_of(Conekta::TransferResponse)
      expect(response.id).to eq(id)
      expect(response.destination).not_to be_nil
      expect(response.destination.type).to eq('bank_transfer')
      expect(response.destination).to be_instance_of(Conekta::TransferDestinationResponse)
    end
  end

  # unit tests for get_transfers
  # Get a list of transfers
  # Get transfers details in the form of a list
  # @param [Hash] opts the optional parameters
  # @option opts [String] :accept_language Use for knowing which language to use
  # @option opts [String] :x_child_company_id In the case of a holding company, the company id of the child company to which will process the request.
  # @option opts [Integer] :limit The numbers of items to return, the maximum value is 250
  # @option opts [String] :search General order search, e.g. by mail, reference etc.
  # @option opts [String] :_next next page
  # @option opts [String] :previous previous page
  # @return [GetTransfersResponse]
  describe 'get_transfers test' do
    it 'should work' do
      limit = 5

      response = @api_instance.get_transfers({limit: limit})

      expect(response).to be_instance_of(Conekta::GetTransfersResponse)
      expect(response.data).not_to be_nil
      expect(response.data).to be_instance_of(Array)
      expect(response.data.length).to eq(limit)
      expect(response.data[0]).to be_instance_of(Conekta::TransfersResponse)
    end
    it 'with next' do
      limit = 6
      _next = '6419562fdb5c8a0001e1cd61'

      response = @api_instance.get_transfers({limit: limit, _next: _next})

      expect(response).to be_instance_of(Conekta::GetTransfersResponse)
      expect(response.data).not_to be_nil
      expect(response.data).to be_instance_of(Array)
      expect(response.data.length).to eq(limit)
      expect(response.data[0]).to be_instance_of(Conekta::TransfersResponse)
      expect(response.next_page_url).not_to be_nil
      expect(response.previous_page_url).not_to be_nil
    end
  end

end
