=begin
#Conekta API

#Conekta sdk

The version of the OpenAPI document: 2.1.0
Contact: engineering@conekta.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'spec_helper'
require 'json'

# Unit tests for Conekta::PaymentLinkApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'PaymentLinkApi' do
  before do
    # run before each test
    @api_instance = Conekta::PaymentLinkApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of PaymentLinkApi' do
    it 'should create an instance of PaymentLinkApi' do
      expect(@api_instance).to be_instance_of(Conekta::PaymentLinkApi)
    end
  end

  # unit tests for cancel_checkout
  # Cancel Payment Link
  # @param id Identifier of the resource
  # @param [Hash] opts the optional parameters
  # @option opts [String] :accept_language Use for knowing which language to use
  # @option opts [String] :x_child_company_id In the case of a holding company, the company id of the child company to which will process the request.
  # @return [CheckoutResponse]
  describe 'cancel_checkout test' do
    it 'should work' do
      id = "c7734ada-e1e9-4b22-90f6-b80a1b2006d4"

      response = @api_instance.cancel_checkout(id, { accept_language: 'es' })

      expect(response).to be_instance_of(Conekta::CheckoutResponse)
      expect(response.status).to eq('Cancelled')
      expect(response.id).to eq(id)
    end
  end

  # unit tests for create_checkout
  # Create Unique Payment Link
  # @param checkout requested field for checkout
  # @param [Hash] opts the optional parameters
  # @option opts [String] :accept_language Use for knowing which language to use
  # @option opts [String] :x_child_company_id In the case of a holding company, the company id of the child company to which will process the request.
  # @return [CheckoutResponse]
  describe 'create_checkout test' do
    it 'without customer info' do

      checkout = Conekta::Checkout.new({
                                         allowed_payment_methods: %w[card cash bank_transfer],
                                         type: "PaymentLink",
                                         name: "Payment Link Name netcore sdk",
                                         recurrent: false,
                                         needs_shipping_contact: false,
                                         expires_at: (DateTime.now + 200).to_time.to_i,
                                         order_template: Conekta::CheckoutOrderTemplate.new({ currency: "MXN", line_items: [
                                           Conekta::Product.new({ name: "toshiba", quantity: 1, unit_price: 500 })] })
                                       })

      response = @api_instance.create_checkout(checkout)

      expect(response).to be_instance_of(Conekta::CheckoutResponse)
      expect(response.expires_at).to eq(checkout.expires_at)
      expect(response.id).to eq('e4bcbed2-194c-4540-a922-b6d7531925a3')
    end
    it 'with customer info' do
      customer_info = Conekta::CustomerInfo.new({
                                                  name: 'steven',
                                                  email: 'steven@gmail.com',
                                                  phone: '5555555555'
                                                })
      checkout = Conekta::Checkout.new({
                                         allowed_payment_methods: %w[card cash bank_transfer],
                                         type: "PaymentLink",
                                         name: "Payment Link Name netcore sdk",
                                         recurrent: true,
                                         needs_shipping_contact: false,
                                         expires_at: (DateTime.now + 200).to_time.to_i,
                                         order_template: Conekta::CheckoutOrderTemplate.new({
                                                                                              currency: "MXN",
                                                                                              customer_info: customer_info,
                                                                                              line_items: [
                                                                                                Conekta::Product.new({ name: "toshiba", quantity: 1, unit_price: 500 })] })
                                       })

      response = @api_instance.create_checkout(checkout)

      expect(response.expires_at).to eq(checkout.expires_at)
      expect(response.id).to eq('4b57dde6-1080-4529-8a7c-7299812a3b1a')
    end
  end

  # unit tests for email_checkout
  # Send an email
  # @param id Identifier of the resource
  # @param email_checkout_request requested field for sms checkout
  # @param [Hash] opts the optional parameters
  # @option opts [String] :accept_language Use for knowing which language to use
  # @option opts [String] :x_child_company_id In the case of a holding company, the company id of the child company to which will process the request.
  # @return [CheckoutResponse]
  describe 'email_checkout test' do
    it 'should work' do
      id = "102bdf5c-3ee6-48ec-a9ff-40ec6f5f054b"
      request = Conekta::EmailCheckoutRequest.new({ email: 'example@conekta.com' })

      response = @api_instance.email_checkout(id, request)

      expect(response).to be_instance_of(Conekta::CheckoutResponse)
      expect(response.emails_sent).to eq(1)
      expect(response.sms_sent).to eq(0)
      expect(response.id).to eq(id)
    end
  end

  # unit tests for get_checkout
  # Get a payment link by ID
  # @param id Identifier of the resource
  # @param [Hash] opts the optional parameters
  # @option opts [String] :accept_language Use for knowing which language to use
  # @option opts [String] :x_child_company_id In the case of a holding company, the company id of the child company to which will process the request.
  # @return [CheckoutResponse]
  describe 'get_checkout test' do
    it 'should work' do
      id = "bac0ed14-6888-4d1d-927a-c80d3f55c009"

      response = @api_instance.get_checkout(id, { accept_language: 'es' })

      expect(response).to be_instance_of(Conekta::CheckoutResponse)
      expect(response.id).to eq(id)
      expect(response.status).to eq('Expired')
    end
  end

  # unit tests for get_checkouts
  # Get a list of payment links
  # Returns a list of links generated by the merchant
  # @param [Hash] opts the optional parameters
  # @option opts [String] :accept_language Use for knowing which language to use
  # @option opts [String] :x_child_company_id In the case of a holding company, the company id of the child company to which will process the request.
  # @option opts [Integer] :limit The numbers of items to return, the maximum value is 250
  # @option opts [String] :search General order search, e.g. by mail, reference etc.
  # @option opts [String] :_next next page
  # @option opts [String] :previous previous page
  # @return [CheckoutsResponse]
  describe 'get_checkouts test' do
    it 'should work' do
      response = @api_instance.get_checkouts({ accept_language: 'en' })

      expect(response).to be_instance_of(Conekta::CheckoutsResponse)
      expect(response.data.length).to eq(20)
      expect(response.next_page_url).to eq('https://api-core.stg.conekta.io/checkouts?next=bac0ed14-6888-4d1d-927a-c80d3f55c009')
    end
  end

  # unit tests for sms_checkout
  # Send an sms
  # @param id Identifier of the resource
  # @param sms_checkout_request requested field for sms checkout
  # @param [Hash] opts the optional parameters
  # @option opts [String] :accept_language Use for knowing which language to use
  # @option opts [String] :x_child_company_id In the case of a holding company, the company id of the child company to which will process the request.
  # @return [CheckoutResponse]
  describe 'sms_checkout test' do
    it 'should work' do
      id = "ce1076bb-5ee6-4d08-a0e2-ec0bfbc49883"
      request = Conekta::SmsCheckoutRequest.new({ phonenumber: '5566982090' })

      response = @api_instance.sms_checkout(id, request)

      expect(response).to be_instance_of(Conekta::CheckoutResponse)
      expect(response.id).to eq(id)
      expect(response.sms_sent).to eq(1)
      expect(response.emails_sent).to eq(0)
    end
  end

end
